service: discourse

frameworkVersion: ">=1.2.0 <2.0.0"

custom:
  stage: "${opt:stage, self:provider.stage}"
  kmsKeyArn: ${file(env.yml):${self:custom.stage}.KEY_ARN}
  BadgesTopic:
    Fn::Join:
      - ":"
      - - arn
        - aws
        - sns
        - Ref: AWS::Region
        - Ref: AWS::AccountId
        - Discourse-Badges

provider:
  name: aws
  runtime: python3.6
  timeout: 180
  environment: ${file(env.yml):${self:custom.stage}}
  iamRoleStatements: # permissions for all of your functions can be set here
    - Effect: Allow
      Action:
        - KMS:Decrypt
      Resource:
        - ${self:custom.kmsKeyArn}
    - Effect: 'Allow'
      Action:
        - "sns:Publish"
      Resource:
        - ${self:custom.BadgesTopic}

plugins:
  - serverless-python-requirements

functions:
  community-content:
      name: Discourse-CommunityContentWebHook
      handler: handler.community_content
      events:
        - http: POST CommunityContent
  user-events:
      name: Discourse-UserEventsWebHook
      handler: handler.user_events
      events:
        - http: POST UserEvents
  badges:
      name: Discourse-AssignBadges
      handler: handler.assign_badges
      events:
        - sns:
            topicName: Discourse-Badges
            displayName: Topic to handle assigning of badges

  import-twin4j:
      name: Discourse-ImportTWIN4j
      handler: handler.import_twin4j
      events:
        - schedule: cron(0 9 ? * 7 *)
  update-profile:
      name: Discourse-UpdateProfileWebHook
      handler: handler.update_profile
      events:
        - http: POST UpdateProfile
  update-topics:
      name: Discourse-UpdateTopics
      handler: handler.update_topics
      events:
        - schedule: rate(1 hour)

package:
  exclude:
    - node_modules/**
    - a/**
    - .git/**
